{"version":3,"file":"chunks/ceres-707.min.js","mappings":"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","sources":["webpack://Waldorfshop7/./resources/js/src/app/components/item/VariationSelect.vue","webpack://Waldorfshop7/resources/js/src/app/components/item/VariationSelect.vue","webpack://Waldorfshop7/./resources/js/src/app/components/item/VariationSelect.vue?cf34","webpack://Waldorfshop7/./resources/js/src/app/components/item/VariationSelect.vue?4792"],"sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"div\",\n    { staticClass: \"row\" },\n    [\n      _vm.attributes.length ||\n      (_vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible)\n        ? [\n            _vm._l(_vm.attributes, function (attribute, index) {\n              return _c(\n                \"div\",\n                { key: index, staticClass: \"col-12 variation-select\" },\n                [\n                  attribute.type === \"dropdown\"\n                    ? _c(\n                        \"div\",\n                        {\n                          ref: \"attributesContaner\",\n                          refInFor: true,\n                          staticClass: \"input-unit\",\n                        },\n                        [\n                          _c(\n                            \"select\",\n                            {\n                              staticClass: \"custom-select\",\n                              attrs: {\n                                id: \"custom-select_\" + attribute.name,\n                                \"data-testing\": \"variation-select-dropdown\",\n                              },\n                              on: {\n                                change: function ($event) {\n                                  return _vm.selectAttribute(\n                                    attribute.attributeId,\n                                    $event.target.value\n                                  )\n                                },\n                              },\n                            },\n                            [\n                              _vm.addPleaseSelectOption || !_vm.hasSelection\n                                ? _c(\"option\", { domProps: { value: -1 } }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemPleaseSelect\"\n                                        )\n                                      )\n                                    ),\n                                  ])\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm.hasEmptyOption ||\n                              _vm.selectedAttributes[attribute.attributeId] ===\n                                null\n                                ? _c(\n                                    \"option\",\n                                    {\n                                      domProps: {\n                                        value: null,\n                                        selected:\n                                          _vm.selectedAttributes[\n                                            attribute.attributeId\n                                          ] === null,\n                                      },\n                                    },\n                                    [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemNoSelection\"\n                                          )\n                                        )\n                                      ),\n                                    ]\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm._l(attribute.values, function (value) {\n                                return _c(\n                                  \"option\",\n                                  {\n                                    key: value.attributeValueId,\n                                    domProps: {\n                                      value: value.attributeValueId,\n                                      selected:\n                                        value.attributeValueId ===\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ],\n                                    },\n                                  },\n                                  [\n                                    _vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId,\n                                      true\n                                    )\n                                      ? [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(value.name) +\n                                              \"\\n                        \"\n                                          ),\n                                        ]\n                                      : _vm.isAttributeSelectionValid(\n                                          attribute.attributeId,\n                                          value.attributeValueId,\n                                          false\n                                        )\n                                      ? [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(\n                                                _vm.$translate(\n                                                  \"Ceres::Template.singleItemNotSalableAttribute\",\n                                                  { name: value.name }\n                                                )\n                                              ) +\n                                              \"\\n                        \"\n                                          ),\n                                        ]\n                                      : [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(\n                                                _vm.$translate(\n                                                  \"Ceres::Template.singleItemInvalidAttribute\",\n                                                  { name: value.name }\n                                                )\n                                              ) +\n                                              \"\\n                        \"\n                                          ),\n                                        ],\n                                  ],\n                                  2\n                                )\n                              }),\n                            ],\n                            2\n                          ),\n                          _vm._v(\" \"),\n                          _c(\n                            \"label\",\n                            {\n                              directives: [\n                                {\n                                  name: \"tooltip\",\n                                  rawName: \"v-tooltip\",\n                                  value: _vm.isTextCut(attribute.name),\n                                  expression: \"isTextCut(attribute.name)\",\n                                },\n                              ],\n                              attrs: {\n                                for: \"custom-select_\" + attribute.name,\n                                \"data-toggle\": \"tooltip\",\n                                \"data-placement\": \"top\",\n                                title: attribute.name,\n                                \"data-testing\":\n                                  \"variation-select-dropdown-label\",\n                              },\n                            },\n                            [_vm._v(_vm._s(attribute.name))]\n                          ),\n                        ]\n                      )\n                    : attribute.type === \"box\" || attribute.type === \"image\"\n                    ? _c(\"div\", [\n                        _c(\n                          \"span\",\n                          {\n                            staticClass: \"text-muted\",\n                            attrs: { \"data-testing\": \"attribute-name\" },\n                          },\n                          [_vm._v(_vm._s(attribute.name) + \":\")]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"b\",\n                          { attrs: { \"data-testing\": \"attribute-value\" } },\n                          [\n                            _vm._v(\n                              _vm._s(\n                                _vm.getSelectedAttributeValueName(attribute)\n                              )\n                            ),\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          {\n                            staticClass: \"v-s-boxes py-3\",\n                            class: { images: attribute.type === \"image\" },\n                          },\n                          [\n                            _vm.addPleaseSelectOption\n                              ? _c(\n                                  \"div\",\n                                  {\n                                    staticClass:\n                                      \"v-s-box bg-white empty-option\",\n                                    class: {\n                                      active:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === -1,\n                                      invalid: !_vm.isAttributeSelectionValid(\n                                        attribute.attributeId,\n                                        -1\n                                      ),\n                                    },\n                                    attrs: {\n                                      \"data-testing\": \"variation-select-box\",\n                                    },\n                                    on: {\n                                      click: function ($event) {\n                                        return _vm.selectAttribute(\n                                          attribute.attributeId,\n                                          -1\n                                        )\n                                      },\n                                    },\n                                  },\n                                  [\n                                    _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemPleaseSelect\"\n                                          )\n                                        )\n                                      ),\n                                    ]),\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm.hasEmptyOption\n                              ? _c(\n                                  \"div\",\n                                  {\n                                    staticClass:\n                                      \"v-s-box bg-white empty-option\",\n                                    class: {\n                                      active:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === null,\n                                      invalid: !_vm.isAttributeSelectionValid(\n                                        attribute.attributeId,\n                                        null,\n                                        true\n                                      ),\n                                    },\n                                    attrs: {\n                                      \"data-testing\": \"variation-select-box\",\n                                    },\n                                    on: {\n                                      click: function ($event) {\n                                        return _vm.selectAttribute(\n                                          attribute.attributeId,\n                                          null\n                                        )\n                                      },\n                                    },\n                                  },\n                                  [\n                                    _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemNoSelection\"\n                                          )\n                                        )\n                                      ),\n                                    ]),\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm._l(attribute.values, function (value) {\n                              return _c(\n                                \"div\",\n                                {\n                                  directives: [\n                                    {\n                                      name: \"tooltip\",\n                                      rawName: \"v-tooltip\",\n                                      value: true,\n                                      expression: \"true\",\n                                    },\n                                  ],\n                                  key: value.attributeValueId,\n                                  staticClass: \"v-s-box bg-white\",\n                                  class: {\n                                    active:\n                                      value.attributeValueId ===\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ],\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId,\n                                      true\n                                    ),\n                                  },\n                                  attrs: {\n                                    \"data-testing\": \"variation-select-box\",\n                                    \"data-html\": \"true\",\n                                    \"data-toggle\": \"tooltip\",\n                                    \"data-placement\": \"top\",\n                                    \"data-original-title\": _vm.getTooltip(\n                                      attribute,\n                                      value\n                                    ),\n                                  },\n                                  on: {\n                                    click: function ($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        value.attributeValueId\n                                      )\n                                    },\n                                  },\n                                },\n                                [\n                                  attribute.type === \"box\"\n                                    ? _c(\"span\", { staticClass: \"mx-3\" }, [\n                                        _vm._v(_vm._s(value.name)),\n                                      ])\n                                    : _c(\"img\", {\n                                        staticClass: \"p-1\",\n                                        attrs: {\n                                          src: value.imageUrl,\n                                          alt: value.name,\n                                        },\n                                      }),\n                                ]\n                              )\n                            }),\n                          ],\n                          2\n                        ),\n                      ])\n                    : _vm._e(),\n                ]\n              )\n            }),\n            _vm._v(\" \"),\n            _vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible\n              ? _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                  _c(\"div\", { staticClass: \"input-unit\" }, [\n                    _c(\n                      \"select\",\n                      {\n                        staticClass: \"custom-select\",\n                        attrs: {\n                          id: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit\",\n                        },\n                        on: {\n                          change: function ($event) {\n                            return _vm.selectUnit($event.target.value)\n                          },\n                        },\n                      },\n                      _vm._l(\n                        _vm.possibleUnitCombinationIds,\n                        function (unitCombinationId) {\n                          return _c(\n                            \"option\",\n                            {\n                              key: unitCombinationId,\n                              domProps: {\n                                value: unitCombinationId,\n                                selected:\n                                  parseInt(unitCombinationId) ===\n                                  _vm.selectedUnit,\n                              },\n                            },\n                            [\n                              _vm.isUnitSelectionValid(unitCombinationId)\n                                ? [\n                                    _vm._v(\n                                      \"\\n                            \" +\n                                        _vm._s(\n                                          _vm.possibleUnits[unitCombinationId]\n                                        ) +\n                                        \"\\n                        \"\n                                    ),\n                                  ]\n                                : [\n                                    _vm._v(\n                                      \"\\n                            \" +\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemInvalidAttribute\",\n                                            {\n                                              name: _vm.possibleUnits[\n                                                unitCombinationId\n                                              ],\n                                            }\n                                          )\n                                        ) +\n                                        \"\\n                        \"\n                                    ),\n                                  ],\n                            ],\n                            2\n                          )\n                        }\n                      ),\n                      0\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"label\",\n                      {\n                        attrs: {\n                          for: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit-label\",\n                        },\n                      },\n                      [\n                        _vm._v(\n                          _vm._s(\n                            _vm.$translate(\"Ceres::Template.singleItemContent\")\n                          )\n                        ),\n                      ]\n                    ),\n                  ]),\n                ])\n              : _vm._e(),\n          ]\n        : [_vm._t(\"default\")],\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"row\">\n        <template v-if=\"attributes.length || (possibleUnitCombinationIds.length > 1 && isContentVisible)\">\n            <div class=\"col-12 variation-select\" v-for=\"(attribute, index) in attributes\" :key=\"index\">\n                <!-- dropdown -->\n                <div class=\"input-unit\" ref=\"attributesContaner\" v-if=\"attribute.type === 'dropdown'\">\n                    <select :id=\"'custom-select_' + attribute.name\" class=\"custom-select\" @change=\"selectAttribute(attribute.attributeId, $event.target.value)\" data-testing=\"variation-select-dropdown\">\n                        <option :value=\"-1\" v-if=\"addPleaseSelectOption || !hasSelection\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</option>\n                        <option\n                                :value=\"null\" v-if=\"hasEmptyOption || selectedAttributes[attribute.attributeId] === null\"\n                                :selected=\"selectedAttributes[attribute.attributeId] === null\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</option>\n                        <option\n                                v-for=\"value in attribute.values\"\n                                :value=\"value.attributeValueId\"\n                                :selected=\"value.attributeValueId === selectedAttributes[attribute.attributeId]\"\n                                :key=\"value.attributeValueId\">\n                            <template v-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true)\">\n                                {{ value.name }}\n                            </template>\n                            <template v-else-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, false)\">\n                                {{ $translate(\"Ceres::Template.singleItemNotSalableAttribute\", { \"name\": value.name }) }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": value.name }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label :for=\"'custom-select_' + attribute.name\" v-tooltip=\"isTextCut(attribute.name)\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"attribute.name\" data-testing=\"variation-select-dropdown-label\">{{ attribute.name }}</label>\n                </div>\n                <!-- /dropdown -->\n\n                <!-- box and image -->\n                <div v-else-if=\"attribute.type === 'box' || attribute.type === 'image'\">\n                    <span class=\"text-muted\" data-testing=\"attribute-name\">{{ attribute.name }}:</span> <b data-testing=\"attribute-value\">{{ getSelectedAttributeValueName(attribute) }}</b>\n                    <div class=\"v-s-boxes py-3\" :class=\"{ 'images': attribute.type === 'image' }\">\n                        <div class=\"v-s-box bg-white empty-option\"\n                             data-testing=\"variation-select-box\"\n                             v-if=\"addPleaseSelectOption\"\n                             @click=\"selectAttribute(attribute.attributeId, -1)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === -1, 'invalid': !isAttributeSelectionValid(attribute.attributeId, -1) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</span>\n                        </div>\n                        <div class=\"v-s-box bg-white empty-option\"\n                             data-testing=\"variation-select-box\"\n                             v-if=\"hasEmptyOption\"\n                             @click=\"selectAttribute(attribute.attributeId, null)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === null, 'invalid': !isAttributeSelectionValid(attribute.attributeId, null, true) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</span>\n                        </div>\n\n                        <div class=\"v-s-box bg-white\"\n                             data-testing=\"variation-select-box\"\n                             v-for=\"value in attribute.values\"\n                             @click=\"selectAttribute(attribute.attributeId, value.attributeValueId)\"\n                             :class=\"{ 'active': value.attributeValueId === selectedAttributes[attribute.attributeId], 'invalid': !isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true) }\"\n                             v-tooltip=\"true\" data-html=\"true\" data-toggle=\"tooltip\" data-placement=\"top\" :data-original-title=\"getTooltip(attribute, value)\"\n                             :key=\"value.attributeValueId\">\n                            <span class=\"mx-3\" v-if=\"attribute.type === 'box'\">{{ value.name }}</span>\n                            <img class=\"p-1\" v-else :src=\"value.imageUrl\" :alt=\"value.name\">\n                        </div>\n                    </div>\n                </div>\n                <!-- /box and image -->\n            </div>\n\n            <!-- units -->\n            <div class=\"col-12 variation-select\" v-if=\"possibleUnitCombinationIds.length > 1 && isContentVisible\">\n                <div class=\"input-unit\">\n                    <select id=\"unit-combination-ids-select\" class=\"custom-select\" @change=\"selectUnit($event.target.value)\" data-testing=\"variation-select-unit\">\n                        <option\n                                v-for=\"unitCombinationId in possibleUnitCombinationIds\"\n                                :value=\"unitCombinationId\"\n                                :selected=\"parseInt(unitCombinationId) === selectedUnit\"\n                                :key=\"unitCombinationId\">\n                            <template v-if=\"isUnitSelectionValid(unitCombinationId)\">\n                                {{ possibleUnits[unitCombinationId] }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": possibleUnits[unitCombinationId] }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label for=\"unit-combination-ids-select\" data-testing=\"variation-select-unit-label\">{{ $translate(\"Ceres::Template.singleItemContent\") }}</label>\n                </div>\n            </div>\n            <!-- /units -->\n        </template>\n\n        <template v-else>\n            <slot></slot>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { textWidth } from \"../../helper/dom\";\nimport { isDefined, isNull, isNullOrUndefined } from \"../../helper/utils\";\n\nconst NotificationService = require(\"../../services/NotificationService\");\n\nexport default {\n\n    name: \"variation-select\",\n\n    props: {\n        forceContent:\n        {\n            type: Boolean,\n            default: false\n        }\n    },\n\n    inject: {\n        itemId: {\n            default: null\n        }\n    },\n\n    data()\n    {\n        return {\n            filteredVariationsCache: {},\n            lastContentCount: 0\n        };\n    },\n\n    mounted()\n    {\n        // initially check for valid selection and disable add to basket button\n        this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!this.currentSelection);\n    },\n\n    computed:\n    {\n        currentVariation() {\n            return this.$store.getters[`${this.itemId}/currentItemVariation`];\n        },\n\n        currentVariationSelect() {\n            return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationSelect;\n        },\n\n        /**\n         * returns true if any variation has no attributes\n         */\n        hasEmptyOption()\n        {\n            return this.variations.some(variation => !variation.attributes.length);\n        },\n\n        addPleaseSelectOption()\n        {\n            return App.config.item.showPleaseSelect;\n        },\n\n        /**\n         * returns the variation, based on the selected attributes / unit\n         * returns false if there are none or multiple results\n         */\n        currentSelection()\n        {\n            const filteredVariations = this.filterVariations(null, null, true);\n\n            if (filteredVariations.length === 1)\n            {\n                return filteredVariations[0];\n            }\n\n            return false;\n        },\n\n        /**\n         * returns all units, selectable by current selection\n         * prop 'forceContent' with value true will return all units, without filtering\n         */\n        possibleUnits()\n        {\n            // use an object, to make the entries unique\n            const possibleUnits = {};\n            const variations = this.forceContent ? this.variations : this.filterVariations(null, null, null, true);\n\n            for (const variation of variations)\n            {\n                possibleUnits[variation.unitCombinationId] = variation.unitName;\n            }\n\n            return possibleUnits;\n        },\n\n        possibleUnitCombinationIds()\n        {\n            return this.transformPossibleUnits(this.possibleUnits).map(value => value[0]);\n        },\n\n        isContentVisible()\n        {\n            return !this.forceContent && !!this.currentSelection || this.forceContent;\n        },\n\n        hasSelection()\n        {\n            return !isNullOrUndefined(this.selectedAttributes) && !Object.values(this.selectedAttributes).some((value) => value < 0);\n        },\n\n        attributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.attributes;\n        },\n\n        selectedAttributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedAttributes;\n        },\n\n        selectedUnit() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedUnit;\n        },\n\n        variations() {\n            return this.currentVariationSelect && this.currentVariationSelect.variations;\n        }\n    },\n\n    methods:\n    {\n        /**\n         * select an attribute and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         */\n        selectAttribute(attributeId, attributeValueId)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n\n            if (this.selectedAttributes[attributeId] !== attributeValueId)\n            {\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemAttribute`, { attributeId, attributeValueId });\n                this.onSelectionChange(attributeId, attributeValueId, null);\n            }\n        },\n\n        /**\n         * select a unit and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {[number, string]} unitId\n         */\n        selectUnit(unitId)\n        {\n            unitId = parseInt(unitId);\n            this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, unitId);\n            this.onSelectionChange(null, null, unitId);\n        },\n\n        onSelectionChange(attributeId, attributeValueId, unitId)\n        {\n            if (this.currentSelection)\n            {\n                this.setVariation(this.currentSelection.variationId);\n            }\n            else if (!this.hasSelection)\n            {\n                // user switched back to \"please select\"\n                this.setVariation(0);\n            }\n            else\n            {\n                this.unsetInvalidSelection(attributeId, attributeValueId, unitId);\n            }\n\n            this.lastContentCount = this.possibleUnitCombinationIds.length;\n        },\n\n        /**\n         * changes the selected attributes / unit, to ensure a valid seelction\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        unsetInvalidSelection(attributeId, attributeValueId, unitId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId, unitId);\n            const closestVariations = this.getClosestVariations(qualifiedVariations);\n            \n            // if the salable 'closestVariations' is undefined, take the not-salable one\n            const closestVariation = closestVariations[0] || closestVariations[1];\n\n            if (!closestVariation)\n            {\n                return;\n            }\n\n            const invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\n\n            this.correctSelection(invalidSelection);\n        },\n\n        getTooltip(attribute, attributeValue)\n        {\n            if(!this.isAttributeSelectionValid(attribute.attributeId, attributeValue.attributeValueId, true))\n            {\n                return this.getInvalidOptionTooltip(attribute.attributeId, attributeValue.attributeValueId);\n            }\n            else if(attribute.type === \"image\")\n            {\n                return this.$translate(\"Ceres::Template.singleItemAttributeTooltip\", {\n                    attribute: attribute.name,\n                    value: attributeValue.name\n                });\n            }\n\n            return \"\";\n        },\n\n        /**\n         * returns a string for box tooltips, for not available options\n         * @param {number} attributeId\n         * @param {number} attributeValueId\n         */\n        getInvalidOptionTooltip(attributeId, attributeValueId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId);\n            const closestVariations   = this.getClosestVariations(qualifiedVariations);\n\n            if (!closestVariations || closestVariations.length <= 0)\n            {\n                return \"\";\n            }\n\n            const invalidSelections = [\n                !!closestVariations[0] ? this.getInvalidSelectionByVariation(closestVariations[0]) : null,\n                !!closestVariations[1] ? this.getInvalidSelectionByVariation(closestVariations[1]) : null\n            ];\n\n            if (!!invalidSelections[0]\n                && !!invalidSelections[1]\n                && invalidSelections[0].attributesToReset.length > invalidSelections[1].attributesToReset.length)\n            {\n                // there is a non-salable variation with less changes\n                return this.$translate(\"Ceres::Template.singleItemNotSalable\");\n            }\n\n            const invalidSelection = invalidSelections[0] || invalidSelections[1];\n            const names = [];\n\n            for (const attribute of invalidSelection.attributesToReset)\n            {\n                if (attribute.attributeId !== attributeId)\n                {\n                    names.push(\"<b>\" + attribute.name +\"</b>\");\n                }\n            }\n            if (invalidSelection.newUnit)\n            {\n                names.push(\n                    \"<b>\" + this.$translate(\"Ceres::Template.singleItemContent\") + \"</b>\"\n                );\n            }\n\n            if (!names.length)\n            {\n                return null;\n            }\n\n            return this.$translate(\"Ceres::Template.singleItemNotAvailableInSelection\", { name: names.join(\", \") });\n        },\n\n        /**\n         * returns a list of variations, filtered by attribute or unit\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        getQualifiedVariations(attributeId, attributeValueId, unitId)\n        {\n            if (isDefined(attributeValueId))\n            {\n                return this.variations.filter(variation =>\n                {\n                    return isDefined(variation.attributes.find(attribute =>\n                        attribute.attributeId === attributeId && attribute.attributeValueId === attributeValueId));\n                });\n            }\n            else if (isDefined(unitId))\n            {\n                return this.variations.filter(variation => variation.unitCombinationId === unitId);\n            }\n\n            return this.variations.filter(variation => !variation.attributes.length);\n        },\n\n        /**\n         * return a salable and a non-salable variation with the minimum number of changes on attributes compared to the current selection.\n         * @param {array} qualifiedVariations\n         */\n        getClosestVariations(qualifiedVariations)\n        {\n            let closestSalableVariation, numberOfSalableChanges;\n            let closestNonSalableVariation, numberOfNonSalableChanges;\n\n            for (const variation of qualifiedVariations)\n            {\n                let changes = 0;\n\n                if (variation.unitCombinationId !== this.selectedUnit && !isNull(this.selectedUnit))\n                {\n                    // when the unit dropdown isn't visible, it should have a lower weight for reset investigations\n                    const unitWeight = this.possibleUnitCombinationIds.length > 1 && this.isContentVisible ? 0.9 : 0.1;\n\n                    changes += unitWeight;\n                }\n\n                for (const attribute of variation.attributes)\n                {\n                    if (this.selectedAttributes[attribute.attributeId] !== attribute.attributeValueId)\n                    {\n                        changes++;\n                    }\n                }\n\n                if(variation.isSalable && (!numberOfSalableChanges || changes < numberOfSalableChanges))\n                {\n                    closestSalableVariation = variation;\n                    numberOfSalableChanges = changes;\n                }\n                else if (!variation.isSalable && (!numberOfNonSalableChanges || changes < numberOfNonSalableChanges))\n                {\n                    closestNonSalableVariation = variation;\n                    numberOfNonSalableChanges = changes;\n                }\n            }\n\n            return [closestSalableVariation, closestNonSalableVariation];\n        },\n\n        /**\n         * returns object with array 'attributesToReset' and newUnit. The attributesToReset contains all attributes, which are not matching with the given variation\n         * @param {object} variation\n         */\n        getInvalidSelectionByVariation(variation)\n        {\n            const attributesToReset = [];\n            let newUnit = null;\n\n            for (let selectedAttributeId in this.selectedAttributes)\n            {\n                selectedAttributeId = parseInt(selectedAttributeId);\n                const variationAttribute = variation.attributes.find(attribute => attribute.attributeId === selectedAttributeId);\n\n                if (!isNull(this.selectedAttributes[selectedAttributeId]))\n                {\n                    if (variationAttribute && variationAttribute.attributeValueId !== this.selectedAttributes[selectedAttributeId] || !variationAttribute)\n                    {\n                        const attributeToReset = this.attributes.find(attr => attr.attributeId === selectedAttributeId);\n\n                        attributesToReset.push(attributeToReset);\n                    }\n                }\n            }\n\n            if (variation.unitCombinationId !== this.selectedUnit)\n            {\n                newUnit = variation.unitCombinationId;\n            }\n\n            return { attributesToReset, newUnit };\n        },\n\n        /**\n         * resets all invalid attributes and change the unit, if required. Prints a message to the user if so.\n         * @param {object} invalidSelection\n         */\n        correctSelection(invalidSelection)\n        {\n            const messages   = [];\n            const attributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            for (const attributeToReset of invalidSelection.attributesToReset)\n            {\n                messages.push(\n                    this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name: attributeToReset.name })\n                );\n\n                attributes[attributeToReset.attributeId] = (!this.hasEmptyOption && App.config.item.showPleaseSelect) ? -1 : null;\n            }\n\n            if (invalidSelection.newUnit)\n            {\n                if (this.lastContentCount > 1 && this.possibleUnitCombinationIds.length > 1 && !isNull(this.selectedUnit))\n                {\n                    messages.push(\n                        this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name:\n                                this.$translate(\"Ceres::Template.singleItemContent\")\n                        })\n                    );\n                }\n\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, invalidSelection.newUnit);\n            }\n\n            this.$store.commit(`${this.itemId}/variationSelect/setItemSelectedAttributes`, attributes);\n\n            this.setVariation(this.currentSelection ? this.currentSelection.variationId : 0);\n\n            NotificationService.warn(\n                messages.join(\"<br>\")\n            ).closeAfter(5000);\n        },\n\n        /**\n         * returns matching variations with current selection\n         * attributes and unitId could be filled, to check a specific selection\n         * @param {object} attributes\n         * @param {number} unitId\n         * @param {boolean} strict\n         */\n        filterVariations(attributes, unitId, strict, ignoreUnit)\n        {\n            attributes = attributes || this.selectedAttributes;\n            unitId = unitId || this.selectedUnit;\n            strict = !!strict;\n            ignoreUnit = !!ignoreUnit;\n\n            const key = JSON.stringify(attributes) + \"_\" + unitId + \"_\" + strict + \"_\" + ignoreUnit;\n\n            if (isDefined(this.filteredVariationsCache[key]))\n            {\n                return this.filteredVariationsCache[key];\n            }\n\n            const uniqueValues = [...new Set(Object.values(attributes))];\n            const isEmptyOptionSelected = uniqueValues.length === 1 && isNull(uniqueValues[0]);\n            const filteredVariations = this.variations.filter(variation =>\n            {\n                // the selected unit is not matching\n                if (!ignoreUnit && variation.unitCombinationId !== unitId)\n                {\n                    return false;\n                }\n\n                // the variation has no attributes (only checked, if any attribute has a selected value); or the variation has attributes and empty option is selected\n                // requires more than 0 attributes\n                if (((!isEmptyOptionSelected && !variation.attributes.length) || (isEmptyOptionSelected && variation.attributes.length))\n                    && this.attributes.length > 0)\n                {\n                    return false;\n                }\n\n                for (const attributeId in attributes)\n                {\n                    const variationAttribute = variation.attributes.find(variationAttribute =>\n                        variationAttribute.attributeId === parseInt(attributeId));\n\n                    // an attribute is not matching with selection\n                    if (variationAttribute &&\n                        variationAttribute.attributeValueId !== attributes[attributeId] &&\n                        (strict || !strict && !isNull(attributes[attributeId]) && attributes[attributeId] !== -1))\n                    {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            this.filteredVariationsCache[key] = filteredVariations;\n\n            return filteredVariations;\n        },\n\n        /**\n         * returns true, if the selection with a new attribute value would be valid\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         * @param {boolean} filterSalableVariations\n         */\n        isAttributeSelectionValid(attributeId, attributeValueId, filterSalableVariations)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n            if (this.selectedAttributes[attributeId] === attributeValueId)\n            {\n                return true;\n            }\n\n            const selectedAttributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            selectedAttributes[attributeId] = parseInt(attributeValueId) || null;\n\n            const ignoreUnit = !(Object.keys(this.possibleUnits).length > 1 && this.isContentVisible);\n            let variations = this.filterVariations(selectedAttributes, null, null, ignoreUnit);\n\n            if (filterSalableVariations)\n            {\n                variations = variations.filter(variation => variation.isSalable)\n            }\n\n            return variations.length > 0;\n        },\n\n        /**\n         * returns true, if the selection with a new unitId would be valid\n         * @param {[number, string]} unitId\n         */\n        isUnitSelectionValid(unitId)\n        {\n            unitId = parseInt(unitId);\n            if (this.selectedUnit === unitId)\n            {\n                return true;\n            }\n\n            return this\n                .filterVariations(null, unitId)\n                .filter(variation => variation.isSalable)\n                .length > 0\n        },\n\n        /**\n         * dispatch vuex action 'loadVariation' to archive a variation\n         * dispatches a custom event named 'onVariationChanged'\n         * @param {[string, number, null]} variationId\n         */\n        setVariation(variationId)\n        {\n            if (!isDefined(variationId) && this.currentSelection)\n            {\n                variationId = this.currentSelection.variationId;\n            }\n\n            if (isDefined(variationId))\n            {\n                this.$store.dispatch(`${this.itemId}/loadVariation`, variationId).then(variation =>\n                {\n                    document.dispatchEvent(new CustomEvent(\"onVariationChanged\",\n                        {\n                            detail:\n                                {\n                                    attributes: variation.attributes,\n                                    documents: variation.documents,\n                                    itemId: this.itemId\n                                }\n                        }));\n                });\n            }\n        },\n\n        isTextCut(content)\n        {\n            if (this.$refs.attributesContaner)\n            {\n                return textWidth(content, \"Custom-Font, Helvetica, Arial, sans-serif\") > this.$refs.attributesContaner[0].clientWidth;\n            }\n\n            return false;\n        },\n\n        getSelectedAttributeValueName(attribute)\n        {\n            const selectedAttributeValueId =  this.selectedAttributes[attribute.attributeId];\n            const selectedAttributeValue = attribute.values.find(attrValue => attrValue.attributeValueId === selectedAttributeValueId);\n\n            if (selectedAttributeValue)\n            {\n                return selectedAttributeValue.name;\n            }\n            else if (App.config.item.showPleaseSelect && selectedAttributeValueId === -1)\n            {\n                return this.$translate(\"Ceres::Template.singleItemPleaseSelect\");\n            }\n            return this.$translate(\"Ceres::Template.singleItemNoSelection\");\n        },\n\n        transformPossibleUnits(possibleUnits)\n        {\n            return Object.entries(possibleUnits).sort((unitA, unitB) => {\n                unitA = this.splitUnitName(unitA[1]);\n                unitB = this.splitUnitName(unitB[1]);\n                // order by unit\n                if (unitA[1] < unitB[1]) {\n                    return -1;\n                }\n                if (unitA[1] > unitB[1]) {\n                    return 1;\n                }\n                // order by content (count)\n                if (unitA[0] < unitB[0]) {\n                    return -1;\n                }\n                if (unitA[0] > unitB[0]) {\n                    return 1;\n                }\n                return 0;\n            });\n        },\n        splitUnitName(unitName) {\n            const unitNameSplit = unitName.split(\" \");\n\n            if (!isNaN(unitNameSplit[0])) {\n                unitNameSplit[0] = unitNameSplit[0].replace(App.currencyPattern.separator_thousands, \"\");\n                unitNameSplit[0] = parseInt(unitNameSplit[0]);\n            }\n\n            return unitNameSplit;\n        }\n    },\n\n    watch:\n    {\n        currentSelection(value)\n        {\n            this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!value);\n        },\n        variations()\n        {\n            // FIX unset variation cache after subsequent variations are loaded\n            this.filteredVariationsCache = {};\n        }\n    }\n}\n</script>\n","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./VariationSelect.vue?vue&type=template&id=588c1887\"\nimport script from \"./VariationSelect.vue?vue&type=script&lang=js\"\nexport * from \"./VariationSelect.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","attributes","length","possibleUnitCombinationIds","isContentVisible","_l","attribute","index","key","type","ref","refInFor","attrs","id","name","on","change","$event","selectAttribute","attributeId","target","value","addPleaseSelectOption","hasSelection","domProps","_v","_s","$translate","_e","hasEmptyOption","selectedAttributes","selected","values","attributeValueId","isAttributeSelectionValid","directives","rawName","isTextCut","expression","for","title","getSelectedAttributeValueName","class","images","active","invalid","click","getTooltip","src","imageUrl","alt","selectUnit","unitCombinationId","parseInt","selectedUnit","isUnitSelectionValid","possibleUnits","_t","_withStripped","NotificationService","require","props","forceContent","Boolean","default","inject","itemId","data","filteredVariationsCache","lastContentCount","mounted","$store","commit","currentSelection","computed","currentVariation","getters","currentVariationSelect","state","items","variationSelect","variations","some","variation","App","config","item","showPleaseSelect","filteredVariations","filterVariations","unitName","transformPossibleUnits","map","isNullOrUndefined","Object","methods","onSelectionChange","unitId","setVariation","variationId","unsetInvalidSelection","qualifiedVariations","getQualifiedVariations","closestVariations","getClosestVariations","closestVariation","invalidSelection","getInvalidSelectionByVariation","correctSelection","attributeValue","getInvalidOptionTooltip","invalidSelections","attributesToReset","names","push","newUnit","join","isDefined","filter","find","closestSalableVariation","numberOfSalableChanges","closestNonSalableVariation","numberOfNonSalableChanges","changes","isNull","isSalable","selectedAttributeId","variationAttribute","attributeToReset","attr","messages","JSON","parse","stringify","warn","closeAfter","strict","ignoreUnit","uniqueValues","Set","isEmptyOptionSelected","filterSalableVariations","keys","dispatch","then","document","dispatchEvent","CustomEvent","detail","documents","content","$refs","attributesContaner","textWidth","clientWidth","selectedAttributeValueId","selectedAttributeValue","attrValue","entries","sort","unitA","unitB","splitUnitName","unitNameSplit","split","isNaN","replace","currencyPattern","separator_thousands","watch"],"sourceRoot":""}