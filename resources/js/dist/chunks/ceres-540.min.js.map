{"version":3,"file":"chunks/ceres-540.min.js","mappings":"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","sources":["webpack://Waldorfshop7/./resources/js/src/app/components/item/TagList.vue","webpack://Waldorfshop7/./resources/js/src/app/components/item/TagList.vue?b910","webpack://Waldorfshop7/resources/js/src/app/components/item/TagList.vue","webpack://Waldorfshop7/./resources/js/src/app/components/item/TagList.vue?1dbb"],"sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _vm.tags && _vm.tags.length > 0\n    ? _c(\n        \"div\",\n        { staticClass: \"pt-1 pb-1\" },\n        [\n          _vm.isTagRouteEnabled\n            ? _vm._l(_vm.tags, function (tag) {\n                return _c(\n                  \"a\",\n                  {\n                    key: tag.id,\n                    staticClass: \"badge mr-1\",\n                    class: [\n                      _vm.tagAppearance,\n                      _vm.marginClasses,\n                      _vm.getTextColorClass(tag.color),\n                    ],\n                    style: [_vm.getStyles(tag), _vm.marginInlineStyles],\n                    attrs: { href: _vm.getTagLink(tag) },\n                  },\n                  [\n                    _vm.getImageForTag(tag).length\n                      ? _c(\"img\", {\n                          attrs: {\n                            src: _vm.getImageForTag(tag),\n                            alt: tag.names.name,\n                          },\n                        })\n                      : _c(\"span\", [_vm._v(_vm._s(tag.names.name))]),\n                  ]\n                )\n              })\n            : _vm._l(_vm.tags, function (tag) {\n                return _c(\n                  \"span\",\n                  {\n                    key: tag.id,\n                    staticClass: \"badge mr-1\",\n                    class: [\n                      _vm.tagAppearance,\n                      _vm.marginClasses,\n                      _vm.getTextColorClass(tag.color),\n                    ],\n                    style: [_vm.getStyles(tag), _vm.marginInlineStyles],\n                  },\n                  [\n                    typeof _vm.getImageForTag(tag) != \"undefined\"\n                      ? _c(\"img\", {\n                          attrs: {\n                            src: _vm.getImageForTag(tag),\n                            alt: tag.names.name,\n                          },\n                        })\n                      : _c(\"span\", [_vm._v(_vm._s(tag.names.name))]),\n                  ]\n                )\n              }),\n        ],\n        2\n      )\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TagList.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TagList.vue?vue&type=script&lang=js\"","<template>\n    <div v-if=\"tags && tags.length > 0\" class=\"pt-1 pb-1\">\n        <template v-if=\"isTagRouteEnabled\">\n            <a\n                v-for=\"tag in tags\"\n                :key=\"tag.id\"\n                :href=\"getTagLink(tag)\"\n                class=\"badge mr-1\"\n                :class=\"[tagAppearance, marginClasses, getTextColorClass(tag.color)]\"\n                :style=\"[getStyles(tag), marginInlineStyles]\">\n                <img v-if=\"getImageForTag(tag).length\" :src=\"getImageForTag(tag)\" :alt=\"tag.names.name\">\n                <span v-else>{{ tag.names.name }}</span>\n            </a>\n        </template>\n        <template v-else>\n            <span\n                v-for=\"tag in tags\"\n                :key=\"tag.id\"\n                class=\"badge mr-1\"\n                :class=\"[tagAppearance, marginClasses, getTextColorClass(tag.color)]\"\n                :style=\"[getStyles(tag), marginInlineStyles]\">\n                <img v-if=\"typeof getImageForTag(tag) != 'undefined'\" :src=\"getImageForTag(tag)\" :alt=\"tag.names.name\">\n                <span v-else>{{ tag.names.name }}</span>\n            </span>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\n\nexport default {\n\n    name: \"tag-list\",\n\n    props: {\n        tagAppearance:\n        {\n            type: String,\n            default: \"\"\n        },\n        marginClasses:\n        {\n            type: String,\n            default: \"\"\n        },\n        marginInlineStyles:\n        {\n            type: String,\n            default: \"\"\n        },\n        enabledRoutes:\n        {\n            type: Array,\n            default: () => []\n        },\n        jsonUrl:\n        {\n            type: String,\n            default: null\n        }\n    },\n\n    data()\n    {\n        return {\n            images: []\n        }\n    },\n\n    inject: {\n        itemId: {\n            default: null\n        }\n    },\n\n    computed: {\n        isTagRouteEnabled()\n        {\n            return this.enabledRoutes.includes(\"all\") || this.enabledRoutes.includes(\"tags\");\n        },\n\n        tags()\n        {\n            const currentVariation = this.$store.getters[`${this.itemId}/currentItemVariation`];\n\n            return (currentVariation && currentVariation.tags) ? currentVariation.tags.filter((tag) => tag.names.name) : [];\n        }\n    },\n\n    mounted()\n    {\n        if (this.jsonUrl.length > 0) {\n            fetch(this.jsonUrl)\n                .then(response => response.json())\n                .then(data => this.images = data);\n        }\n    },\n\n    methods:\n    {\n        getTextColorClass(bgColor)\n        {\n            if (!bgColor)return \"badge-primary\";\n            const color = (bgColor.charAt(0) === \"#\") ? bgColor.substring(1, 7) : bgColor;\n            const red = parseInt(color.substring(0, 2), 16);\n            const green = parseInt(color.substring(2, 4), 16);\n            const blue = parseInt(color.substring(4, 6), 16);\n            const result = (red * 0.299) + (green * 0.587) + (blue * 0.114);\n\n            return (result > 186) ? \"text-dark\" : \"text-light\";\n        },\n        getStyles(tag)\n        {\n            if (tag.color)\n            {\n                return {\n                    backgroundColor: tag.color\n                };\n            }\n            return {};\n        },\n        getTagLink(tag)\n        {\n          let url = \"/\" + encodeURIComponent(tag.names.name.toLowerCase().replace(/\\s+/g,'_')) + \"_t\" + tag.id;\n          if (App.defaultLanguage != App.language)\n          {\n            url = \"/\" + App.language + url;\n          }\n          return url;\n        },\n        getImageForTag(tag)\n        {\n            const imageObject = this.images.find(o => o.id === tag.id);\n            return imageObject === undefined ? \"\" : imageObject.img;\n        },\n    }\n}\n</script>\n","import { render, staticRenderFns } from \"./TagList.vue?vue&type=template&id=09fbf8ab\"\nimport script from \"./TagList.vue?vue&type=script&lang=js\"\nexport * from \"./TagList.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","tags","length","staticClass","isTagRouteEnabled","_l","tag","key","id","class","tagAppearance","marginClasses","getTextColorClass","color","style","getStyles","marginInlineStyles","attrs","href","getTagLink","getImageForTag","src","alt","names","name","_v","_s","_e","_withStripped","props","type","String","default","enabledRoutes","Array","jsonUrl","data","images","inject","itemId","computed","includes","currentVariation","$store","getters","filter","mounted","fetch","then","response","json","methods","bgColor","charAt","substring","parseInt","backgroundColor","url","encodeURIComponent","toLowerCase","replace","App","defaultLanguage","language","imageObject","find","o","undefined","img"],"sourceRoot":""}